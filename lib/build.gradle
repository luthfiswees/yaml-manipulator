/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    // for publishing to artifactory
    id 'maven-publish'
    id 'signing'
}

// Metadata
group 'id.luthfiswees'
archivesBaseName = "yaml-manipulator"
version '0.0.7'

// source compatibility
sourceCompatibility = 1.8

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // Snake yaml dependency
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.29'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Publishing Needs
// #######################################################################################################################

javadoc {
    classpath = sourceSets.main.runtimeClasspath
	options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJarHelper(type: Javadoc) {
    source = sourceSets.main.java.srcDirs
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadocJarHelper) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

// for publishing, reference here https://central.sonatype.org/publish/publish-gradle/#metadata-definition-and-upload
publishing {
	repositories {
		maven {
			name = "ossrh"
			// Reference https://stackoverflow.com/questions/66812495/gradle-error-when-using-maven-publishing-task
			def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
			def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
			url = project.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			credentials {
				username = System.getenv("OSSRHUSERNAME")
				password = System.getenv("OSSRHPASSWORD")
			}
		}
	}

	publications {
		mavenJava(MavenPublication) {

			artifactId = 'yaml-manipulator'
			from components.java
			artifact sourcesJar
			artifact javadocJar

			pom {
				name = 'YamlManipulator'
				packaging = 'jar'
				description = 'Yaml Manipulator built on top of snakeyaml. Makes manipulating yaml easier'
				url = 'https://github.com/luthfiswees/yaml-manipulator'

				scm {
					url = 'https://github.com/luthfiswees/yaml-manipulator.git'
					connection = 'scm:git@github.com:luthfiswees/yaml-manipulator.git'
					developerConnection = 'scm:git@github.com:luthfiswees/yaml-manipulator.git'
				}

				licenses {
					license {
						name = 'MIT License'
						url = 'http://www.opensource.org/licenses/mit-license.php'
					}
				}

				developers {
					developer {
						id = 'luthfiswees'
						name = 'Luthfi Kurnia Putra'
						email = 'luthfiswees@gmail.com'
					}
				}
			}
		}
	}
}

signing {
	sign publishing.publications.mavenJava
}
